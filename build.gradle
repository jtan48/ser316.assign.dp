/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'application'
    //id 'com.github.spotbugs' version '1.6.11'
}



//project.extensions.extraProperties.set('SpotBugsTask', com.github.spotbugs.SpotBugsTask)
apply plugin: 'application'
apply plugin: 'jacoco'

//create a single Jar with all dependencies
task fatJar(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'Ass5 Jar',  
        	'Implementation-Version': 1.0,
        	'Main-Class': 'blue.flame.Ass5'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}


repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    google()
    jcenter()
    mavenCentral()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:28.0-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

	// for parsing json
	implementation 'com.google.code.gson:gson:2.6.2'
	
	// https://mvnrepository.com/artifact/com.google.code.gson/gson
	compile group: 'com.google.code.gson', name: 'gson', version: '2.6'
	
    compile fileTree(dir: 'lib', include: '*.jar')

	compile "junit:junit:4.12"
	//compile files('cls/')

	//spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'
}

mainClassName = 'blue.flame.Ass5'

/////////////////////////////////////////////////////////////////////////
// Configure Checkstyle
/////////////////////////////////////////////////////////////////////////
 apply plugin: 'checkstyle'
 checkstyle {
   // Keep checkstyle a little quieter
   ignoreFailures = true
   showViolations = false
 }

 tasks.withType(Checkstyle) {
   reports {
     html.enabled = true
     xml.enabled = false
   }
 }
 checkstyle {
     toolVersion = "8.8"
 }


///////////////////////////////////////////////////////////////////////////
// Configure SpotBugs
///////////////////////////////////////////////////////////////////////////
//spotbugs {
//   toolVersion = '3.1.12'
//}

// To generate an HTML report instead of XML
//tasks.withType(com.github.spotbugs.SpotBugsTask) {
//   reports {
//     xml.enabled = false
//     html.enabled = true
//   }
//}